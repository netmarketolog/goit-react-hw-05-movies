{"version":3,"file":"static/js/883.62a5a8bb.chunk.js","mappings":"6NAGaA,EAAaC,EAAAA,GAAAA,GAAH,4GAMVC,GAAOD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,kEAIJG,EAASH,EAAAA,GAAAA,IAAH,+Q,SCRNI,EAAW,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACtCC,GAAWC,EAAAA,EAAAA,MACXC,EAAU,0CAAsCL,GACtD,OACE,UAACN,EAAD,YACE,SAACE,EAAD,CAAMU,GAAE,kBAAaJ,GAAWK,MAAO,CAAEC,KAAML,GAA/C,UACE,SAACL,EAAD,CAAQW,IAAKT,EAAaK,EAAaK,EAAOC,IAAKV,OAErD,wBAAKA,MAGV,C,sHCdYW,E,OAAWjB,GAAAA,GAAH,0H,SC4BrB,EAxBa,WACX,OAA0BkB,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAAeC,KAAKH,EACrB,GAAE,KAGD,SAACH,EAAD,UACGE,EAAMK,KAAI,SAAAC,GACT,IAAQC,EAAiCD,EAAjCC,GAAIC,EAA6BF,EAA7BE,YAAarB,EAAgBmB,EAAhBnB,MAAOsB,EAASH,EAATG,KAEhC,OACE,SAACxB,EAAA,EAAD,CAEEC,WAAYsB,EACZrB,MAAK,OAAEA,QAAF,IAAEA,EAAAA,EAASsB,EAChBrB,QAASmB,GAHJA,EAMV,KAGN,C,8LC3BKG,EAAU,4CACVC,EAAM,gCAEL,SAAeR,IAAtB,4CAAO,OAAP,oBAAO,iGACCS,EADD,UACUD,EADV,6BACkCD,GADlC,SAEcG,EAAAA,GAAAA,IAAUD,GAFxB,cAECE,EAFD,gBAGcA,EAAKC,KAHnB,cAGCA,EAHD,gBAIkBA,EAAKC,QAJvB,cAICC,EAJD,yBAMEA,GANF,mEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,oFACCP,EADD,UACUD,EADV,uBAC4BD,EAD5B,iCAC4DS,EAD5D,wCAEkBN,EAAAA,GAAAA,IAAUD,GAF5B,cAECQ,EAFD,gBAGcA,EAASL,KAHvB,cAGCA,EAHD,gBAIkBA,EAAKC,QAJvB,cAICC,EAJD,yBAME,CAAEA,SAAAA,EAAUF,KAAAA,IANd,mEASA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BjC,GAA5B,kFACCwB,EADD,UACUD,EADV,iBACsBvB,GADtB,OACgCsB,EADhC,4BAEkBG,EAAAA,GAAAA,IAAUD,GAF5B,cAECQ,EAFD,gBAGcA,EAASL,KAHvB,cAGCA,EAHD,yBAKEA,GALF,kEAQA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAyBlC,GAAzB,oFACCwB,EADD,UACUD,EADV,iBACsBvB,EADtB,mBACwCsB,EADxC,4BAEkBG,EAAAA,GAAAA,IAAUD,GAF5B,cAECQ,EAFD,gBAGcA,EAASL,KAHvB,cAGCA,EAHD,gBAIcA,EAAKQ,KAJnB,cAICA,EAJD,yBAMEA,GANF,mEASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BpC,GAA5B,oFACCwB,EADD,UACUD,EADV,iBACsBvB,EADtB,mBACwCsB,EADxC,mCAEkBG,EAAAA,GAAAA,IAAUD,GAF5B,cAECQ,EAFD,gBAGcA,EAASL,KAHvB,cAGCA,EAHD,gBAIkBA,EAAKC,QAJvB,cAICC,EAJD,yBAMEA,GANF,mE","sources":["components/FilmCard/FilmCard.styled.js","components/FilmCard/FilmCard.js","components/Pages/Home/Home.styled.js","components/Pages/Home/Home.js","components/api/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const StyledList = styled.li`\n  list-style: none;\n  width: 300px;\n  cursor: pointer;\n  text-decoration: none;\n`;\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n  width: 100%;\n`;\nexport const Poster = styled.img`\n  display: block;\n  width: 300px;\n  height: 460px;\n  cursor: pointer;\n  transition: 0.3s;\n\n  :hover {\n    background: linear-gradient(to bottom, #e8edec, #d2d1d3);\n    box-shadow: 0px 3px 20px 0px black;\n    transform: scale(1.05);\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport error from '../img/error.png';\nimport { StyledList, Link, Poster } from './FilmCard.styled';\nimport PropTypes from 'prop-types';\n\nexport const FilmCard = ({ posterPath, title, movieId }) => {\n  const location = useLocation();\n  const filmPoster = `https://image.tmdb.org/t/p/w500/${posterPath}`;\n  return (\n    <StyledList>\n      <Link to={`/movies/${movieId}`} state={{ from: location }}>\n        <Poster src={posterPath ? filmPoster : error} alt={title} />\n      </Link>\n      <h2>{title}</h2>\n    </StyledList>\n  );\n};\n\nFilmCard.propTypes = {\n  posterPath: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  movieId: PropTypes.number.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const HomeList = styled.ul`\n  padding: 30px;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n","import { useState, useEffect } from 'react';\nimport { trendingFilm } from 'components/api/api';\nimport { FilmCard } from 'components/FilmCard/FilmCard';\n\nimport { HomeList } from './Home.styled';\n\nconst Home = () => {\n  const [films, setFilms] = useState([]);\n\n  useEffect(() => {\n    trendingFilm().then(setFilms);\n  }, []);\n\n  return (\n    <HomeList>\n      {films.map(film => {\n        const { id, poster_path, title, name } = film;\n\n        return (\n          <FilmCard\n            key={id}\n            posterPath={poster_path}\n            title={title ?? name}\n            movieId={id}\n          />\n        );\n      })}\n    </HomeList>\n  );\n};\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = '?api_key=8fa17eefa9c2b424e1a30217c39bc412';\nconst URL = 'https://api.themoviedb.org/3/';\n\nexport async function trendingFilm() {\n  const url = `${URL}trending/movie/day${API_KEY}`;\n  const resp = await axios.get(url);\n  const data = await resp.data;\n  const filmList = await data.results;\n\n  return filmList;\n}\nexport async function searchMovies(searchQuery) {\n  const url = `${URL}search/movie${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`;\n  const response = await axios.get(url);\n  const data = await response.data;\n  const filmList = await data.results;\n\n  return { filmList, data };\n}\n\nexport async function movieDetails(movieId) {\n  const url = `${URL}movie/${movieId}${API_KEY}&language=en-US`;\n  const response = await axios.get(url);\n  const data = await response.data;\n\n  return data;\n}\n\nexport async function movieCast(movieId) {\n  const url = `${URL}movie/${movieId}/credits${API_KEY}&language=en-US`;\n  const response = await axios.get(url);\n  const data = await response.data;\n  const cast = await data.cast;\n\n  return cast;\n}\n\nexport async function movieReviews(movieId) {\n  const url = `${URL}movie/${movieId}/reviews${API_KEY}&language=en-US&page=1`;\n  const response = await axios.get(url);\n  const data = await response.data;\n  const filmList = await data.results;\n\n  return filmList;\n}\n"],"names":["StyledList","styled","Link","NavLink","Poster","FilmCard","posterPath","title","movieId","location","useLocation","filmPoster","to","state","from","src","error","alt","HomeList","useState","films","setFilms","useEffect","trendingFilm","then","map","film","id","poster_path","name","API_KEY","URL","url","axios","resp","data","results","filmList","searchMovies","searchQuery","response","movieDetails","movieCast","cast","movieReviews"],"sourceRoot":""}